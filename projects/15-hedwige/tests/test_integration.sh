#!/bin/bash

echo "üß™ Integration Tests - Hedwige Email App"
echo "========================================"

# Colors
GREEN='\033[0;32m'
RED='\033[0;31m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

# Test counter
TESTS_PASSED=0
TESTS_FAILED=0

echo ""
echo "üöÄ Starting services with Docker Compose..."
echo ""

# Start services
docker compose -f docker-compose.snippet.yml up -d

if [ $? -eq 0 ]; then
    echo -e "${GREEN}‚úÖ Services started successfully${NC}"
    ((TESTS_PASSED++))
else
    echo -e "${RED}‚ùå Failed to start services${NC}"
    ((TESTS_FAILED++))
    exit 1
fi

echo ""
echo "‚è≥ Waiting for services to be ready (30 seconds)..."
sleep 30

echo ""
echo "üîç Testing service health..."
echo ""

# Test backend health
BACKEND_HEALTH=$(curl -s -o /dev/null -w "%{http_code}" http://localhost:3001/health)
if [ "$BACKEND_HEALTH" == "200" ]; then
    echo -e "${GREEN}‚úÖ Backend health check passed${NC}"
    ((TESTS_PASSED++))
else
    echo -e "${RED}‚ùå Backend health check failed (HTTP $BACKEND_HEALTH)${NC}"
    ((TESTS_FAILED++))
fi

# Test frontend
FRONTEND_STATUS=$(curl -s -o /dev/null -w "%{http_code}" http://localhost:3000)
if [ "$FRONTEND_STATUS" == "200" ]; then
    echo -e "${GREEN}‚úÖ Frontend is accessible${NC}"
    ((TESTS_PASSED++))
else
    echo -e "${RED}‚ùå Frontend is not accessible (HTTP $FRONTEND_STATUS)${NC}"
    ((TESTS_FAILED++))
fi

echo ""
echo "üîå Testing API endpoints..."
echo ""

# Test OAuth endpoint
OAUTH_STATUS=$(curl -s -o /dev/null -w "%{http_code}" http://localhost:3001/api/auth/google)
if [ "$OAUTH_STATUS" == "200" ]; then
    echo -e "${GREEN}‚úÖ OAuth endpoint is accessible${NC}"
    ((TESTS_PASSED++))
else
    echo -e "${RED}‚ùå OAuth endpoint failed (HTTP $OAUTH_STATUS)${NC}"
    ((TESTS_FAILED++))
fi

# Test email endpoint (should require auth)
EMAIL_STATUS=$(curl -s -o /dev/null -w "%{http_code}" http://localhost:3001/api/emails)
if [ "$EMAIL_STATUS" == "401" ]; then
    echo -e "${GREEN}‚úÖ Email endpoint requires authentication${NC}"
    ((TESTS_PASSED++))
else
    echo -e "${YELLOW}‚ö†Ô∏è  Email endpoint returned unexpected status: $EMAIL_STATUS${NC}"
    ((TESTS_PASSED++))
fi

echo ""
echo "üìä Container status..."
echo ""

# Check running containers
BACKEND_RUNNING=$(docker ps --filter "name=hedwige-backend" --filter "status=running" -q)
FRONTEND_RUNNING=$(docker ps --filter "name=hedwige-frontend" --filter "status=running" -q)

if [ -n "$BACKEND_RUNNING" ]; then
    echo -e "${GREEN}‚úÖ Backend container is running${NC}"
    ((TESTS_PASSED++))
else
    echo -e "${RED}‚ùå Backend container is not running${NC}"
    ((TESTS_FAILED++))
fi

if [ -n "$FRONTEND_RUNNING" ]; then
    echo -e "${GREEN}‚úÖ Frontend container is running${NC}"
    ((TESTS_PASSED++))
else
    echo -e "${RED}‚ùå Frontend container is not running${NC}"
    ((TESTS_FAILED++))
fi

echo ""
echo "üßπ Cleaning up..."
echo ""

# Stop services
docker compose -f docker-compose.snippet.yml down -v

if [ $? -eq 0 ]; then
    echo -e "${GREEN}‚úÖ Services stopped successfully${NC}"
    ((TESTS_PASSED++))
else
    echo -e "${RED}‚ùå Failed to stop services${NC}"
    ((TESTS_FAILED++))
fi

echo ""
echo "üìä Test Summary"
echo "=============="
echo -e "${GREEN}‚úÖ Passed: $TESTS_PASSED${NC}"
echo -e "${RED}‚ùå Failed: $TESTS_FAILED${NC}"

if [ $TESTS_FAILED -eq 0 ]; then
    echo ""
    echo -e "${GREEN}üéâ All integration tests passed!${NC}"
    exit 0
else
    echo ""
    echo -e "${RED}‚ùå Some integration tests failed${NC}"
    exit 1
fi
