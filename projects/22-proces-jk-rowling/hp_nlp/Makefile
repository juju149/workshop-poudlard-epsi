# Makefile pour le pipeline NLP Harry Potter
# Simplifie l'ex√©cution des notebooks et l'installation

.PHONY: help setup install-spacy run clean test

# Couleurs pour l'affichage
GREEN := \033[0;32m
YELLOW := \033[1;33m
NC := \033[0m # No Color

help: ## Affiche cette aide
	@echo "$(GREEN)Pipeline NLP Harry Potter - Commandes disponibles:$(NC)"
	@echo ""
	@grep -E '^[a-zA-Z_-]+:.*?## .*$$' $(MAKEFILE_LIST) | sort | awk 'BEGIN {FS = ":.*?## "}; {printf "  $(YELLOW)%-15s$(NC) %s\n", $$1, $$2}'
	@echo ""

setup: ## Installation compl√®te (d√©pendances + mod√®le spaCy)
	@echo "$(GREEN)üîß Installation des d√©pendances...$(NC)"
	pip install -r requirements.txt
	@echo ""
	@echo "$(GREEN)üì¶ T√©l√©chargement du mod√®le spaCy fran√ßais...$(NC)"
	python -m spacy download fr_core_news_lg || python -m spacy download fr_core_news_sm
	@echo ""
	@echo "$(GREEN)‚úÖ Installation termin√©e!$(NC)"

install-spacy: ## Installer uniquement le mod√®le spaCy
	@echo "$(GREEN)üì¶ Installation du mod√®le spaCy fran√ßais (large)...$(NC)"
	python -m spacy download fr_core_news_lg || echo "$(YELLOW)‚ö†Ô∏è  Mod√®le large non disponible, installation du mod√®le small...$(NC)" && python -m spacy download fr_core_news_sm

run: ## Ex√©cuter tous les notebooks en s√©quence
	@echo "$(GREEN)üöÄ Ex√©cution du pipeline NLP complet...$(NC)"
	@echo ""
	@echo "$(YELLOW)üìñ Notebook 1: Ingestion et nettoyage$(NC)"
	jupyter nbconvert --to notebook --execute notebooks/01_ingest_clean.ipynb --output 01_ingest_clean.ipynb
	@echo ""
	@echo "$(YELLOW)üß† Notebook 2: Pipeline NLP$(NC)"
	jupyter nbconvert --to notebook --execute notebooks/02_nlp_pipeline.ipynb --output 02_nlp_pipeline.ipynb
	@echo ""
	@echo "$(YELLOW)üîç Notebook 3: Extraction d'√©v√©nements$(NC)"
	jupyter nbconvert --to notebook --execute notebooks/03_events_extraction.ipynb --output 03_events_extraction.ipynb
	@echo ""
	@echo "$(YELLOW)üìä Notebook 4: Agr√©gation et visualisations$(NC)"
	jupyter nbconvert --to notebook --execute notebooks/04_aggregation_viz.ipynb --output 04_aggregation_viz.ipynb
	@echo ""
	@echo "$(YELLOW)üìÑ Notebook 5: Rapport m√©thodologique$(NC)"
	jupyter nbconvert --to notebook --execute notebooks/05_methods_report.ipynb --output 05_methods_report.ipynb
	@echo ""
	@echo "$(GREEN)‚úÖ Pipeline termin√©! R√©sultats dans outputs/$(NC)"

run-nb1: ## Ex√©cuter notebook 1 uniquement (ingestion)
	@echo "$(GREEN)üìñ Ex√©cution: Ingestion et nettoyage$(NC)"
	jupyter nbconvert --to notebook --execute notebooks/01_ingest_clean.ipynb --output 01_ingest_clean.ipynb

run-nb2: ## Ex√©cuter notebook 2 uniquement (NLP)
	@echo "$(GREEN)üß† Ex√©cution: Pipeline NLP$(NC)"
	jupyter nbconvert --to notebook --execute notebooks/02_nlp_pipeline.ipynb --output 02_nlp_pipeline.ipynb

run-nb3: ## Ex√©cuter notebook 3 uniquement (√©v√©nements)
	@echo "$(GREEN)üîç Ex√©cution: Extraction d'√©v√©nements$(NC)"
	jupyter nbconvert --to notebook --execute notebooks/03_events_extraction.ipynb --output 03_events_extraction.ipynb

run-nb4: ## Ex√©cuter notebook 4 uniquement (visualisations)
	@echo "$(GREEN)üìä Ex√©cution: Agr√©gation et visualisations$(NC)"
	jupyter nbconvert --to notebook --execute notebooks/04_aggregation_viz.ipynb --output 04_aggregation_viz.ipynb

run-nb5: ## Ex√©cuter notebook 5 uniquement (rapport)
	@echo "$(GREEN)üìÑ Ex√©cution: Rapport m√©thodologique$(NC)"
	jupyter nbconvert --to notebook --execute notebooks/05_methods_report.ipynb --output 05_methods_report.ipynb

report: ## G√©n√©rer uniquement le rapport (suppose que les donn√©es existent)
	@echo "$(GREEN)üìÑ G√©n√©ration du rapport...$(NC)"
	jupyter nbconvert --to notebook --execute notebooks/05_methods_report.ipynb --output 05_methods_report.ipynb
	@echo "$(GREEN)‚úÖ Rapport g√©n√©r√©: outputs/methodology_report.html$(NC)"

open-report: ## Ouvrir le rapport HTML dans le navigateur
	@if [ -f outputs/methodology_report.html ]; then \
		xdg-open outputs/methodology_report.html 2>/dev/null || open outputs/methodology_report.html 2>/dev/null || echo "$(YELLOW)Ouvrez manuellement: outputs/methodology_report.html$(NC)"; \
	else \
		echo "$(YELLOW)‚ö†Ô∏è  Rapport non trouv√©. Ex√©cutez 'make report' d'abord.$(NC)"; \
	fi

jupyter: ## Lancer Jupyter Lab
	@echo "$(GREEN)üöÄ Lancement de Jupyter Lab...$(NC)"
	jupyter lab

clean: ## Nettoyer les fichiers temporaires et g√©n√©r√©s
	@echo "$(GREEN)üßπ Nettoyage...$(NC)"
	rm -rf data/*.parquet
	rm -rf outputs/*
	rm -rf .ipynb_checkpoints
	rm -rf notebooks/.ipynb_checkpoints
	find . -type d -name "__pycache__" -exec rm -rf {} + 2>/dev/null || true
	find . -type f -name "*.pyc" -delete
	@echo "$(GREEN)‚úÖ Nettoyage termin√©$(NC)"

clean-outputs: ## Nettoyer uniquement les sorties (garder les donn√©es)
	@echo "$(GREEN)üßπ Nettoyage des outputs...$(NC)"
	rm -rf outputs/*
	@echo "$(GREEN)‚úÖ Outputs nettoy√©s$(NC)"

test: ## V√©rifier l'installation et les d√©pendances
	@echo "$(GREEN)üß™ V√©rification de l'environnement...$(NC)"
	@echo ""
	@python --version || echo "$(YELLOW)‚ö†Ô∏è  Python non trouv√©$(NC)"
	@echo ""
	@python -c "import pandas; print('‚úÖ pandas:', pandas.__version__)" || echo "$(YELLOW)‚ö†Ô∏è  pandas non install√©$(NC)"
	@python -c "import spacy; print('‚úÖ spaCy:', spacy.__version__)" || echo "$(YELLOW)‚ö†Ô∏è  spaCy non install√©$(NC)"
	@python -c "import spacy; nlp = spacy.load('fr_core_news_lg'); print('‚úÖ Mod√®le fr_core_news_lg charg√©')" || \
		python -c "import spacy; nlp = spacy.load('fr_core_news_sm'); print('‚úÖ Mod√®le fr_core_news_sm charg√©')" || \
		echo "$(YELLOW)‚ö†Ô∏è  Aucun mod√®le fran√ßais trouv√©$(NC)"
	@python -c "import matplotlib; print('‚úÖ matplotlib:', matplotlib.__version__)" || echo "$(YELLOW)‚ö†Ô∏è  matplotlib non install√©$(NC)"
	@python -c "import jupyter; print('‚úÖ jupyter install√©')" || echo "$(YELLOW)‚ö†Ô∏è  jupyter non install√©$(NC)"
	@echo ""
	@echo "$(GREEN)‚úÖ V√©rification termin√©e$(NC)"

stats: ## Afficher les statistiques du projet
	@echo "$(GREEN)üìä Statistiques du projet$(NC)"
	@echo ""
	@echo "Notebooks:"
	@ls -lh notebooks/*.ipynb 2>/dev/null | wc -l | xargs echo "  Nombre:"
	@echo ""
	@echo "Donn√©es:"
	@if [ -d data ]; then \
		du -sh data 2>/dev/null | awk '{print "  Taille data: " $$1}'; \
		ls data/*.parquet 2>/dev/null | wc -l | xargs echo "  Fichiers parquet:"; \
	else \
		echo "  Aucune donn√©e g√©n√©r√©e"; \
	fi
	@echo ""
	@echo "Outputs:"
	@if [ -d outputs ]; then \
		du -sh outputs 2>/dev/null | awk '{print "  Taille outputs: " $$1}'; \
		ls outputs/* 2>/dev/null | wc -l | xargs echo "  Fichiers g√©n√©r√©s:"; \
	else \
		echo "  Aucun output g√©n√©r√©"; \
	fi

# Par d√©faut, afficher l'aide
.DEFAULT_GOAL := help
