#!/bin/bash
set -e

echo "üß™ Test Smoke - D√©fi 22: Proc√®s de J.K. Rowling"
echo "=============================================="

# Couleurs
GREEN='\033[0;32m'
RED='\033[0;31m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

# Variables
PROJECT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")/.." && pwd)"
BOOKS_DIR="$PROJECT_DIR/../../context/books"
OUTPUT_DIR="$PROJECT_DIR/output"
DATA_DIR="$PROJECT_DIR/data"

echo -e "\n${YELLOW}1Ô∏è‚É£  V√©rification de la structure du projet${NC}"
if [ -d "$PROJECT_DIR/src" ] && [ -d "$PROJECT_DIR/docs" ] && [ -d "$PROJECT_DIR/tests" ]; then
    echo -e "${GREEN}‚úÖ Structure du projet OK${NC}"
else
    echo -e "${RED}‚ùå Structure du projet incompl√®te${NC}"
    exit 1
fi

echo -e "\n${YELLOW}2Ô∏è‚É£  V√©rification des livres Harry Potter${NC}"
if [ -d "$BOOKS_DIR" ]; then
    book_count=$(find "$BOOKS_DIR" -name "*.pdf" | wc -l)
    echo -e "${GREEN}‚úÖ R√©pertoire des livres trouv√© ($book_count PDFs)${NC}"
    if [ "$book_count" -lt 7 ]; then
        echo -e "${YELLOW}‚ö†Ô∏è  Attention: moins de 7 livres trouv√©s${NC}"
    fi
else
    echo -e "${RED}‚ùå R√©pertoire des livres introuvable${NC}"
    exit 1
fi

echo -e "\n${YELLOW}3Ô∏è‚É£  V√©rification des d√©pendances Python${NC}"
if command -v python3 &> /dev/null; then
    echo -e "${GREEN}‚úÖ Python3 install√©${NC}"
    python3 --version
    
    # V√©rifier les modules critiques
    if python3 -c "import PyPDF2, pandas, matplotlib" 2>/dev/null; then
        echo -e "${GREEN}‚úÖ Modules Python critiques install√©s${NC}"
    else
        echo -e "${YELLOW}‚ö†Ô∏è  Modules Python manquants (normal si pas install√© localement)${NC}"
    fi
else
    echo -e "${YELLOW}‚ö†Ô∏è  Python3 non trouv√© (OK si ex√©cution Docker uniquement)${NC}"
fi

echo -e "\n${YELLOW}4Ô∏è‚É£  V√©rification du script d'analyse${NC}"
if [ -f "$PROJECT_DIR/src/analyze_corpus.py" ]; then
    echo -e "${GREEN}‚úÖ Script d'analyse trouv√©${NC}"
    # V√©rifier la syntaxe Python si possible
    if command -v python3 &> /dev/null; then
        if python3 -m py_compile "$PROJECT_DIR/src/analyze_corpus.py" 2>/dev/null; then
            echo -e "${GREEN}‚úÖ Syntaxe Python valide${NC}"
        else
            echo -e "${YELLOW}‚ö†Ô∏è  Impossible de v√©rifier la syntaxe${NC}"
        fi
    fi
else
    echo -e "${RED}‚ùå Script d'analyse introuvable${NC}"
    exit 1
fi

echo -e "\n${YELLOW}5Ô∏è‚É£  V√©rification des fichiers Docker${NC}"
if [ -f "$PROJECT_DIR/Dockerfile" ]; then
    echo -e "${GREEN}‚úÖ Dockerfile trouv√©${NC}"
else
    echo -e "${RED}‚ùå Dockerfile introuvable${NC}"
    exit 1
fi

if [ -f "$PROJECT_DIR/docker-compose.snippet.yml" ]; then
    echo -e "${GREEN}‚úÖ docker-compose.snippet.yml trouv√©${NC}"
else
    echo -e "${RED}‚ùå docker-compose.snippet.yml introuvable${NC}"
    exit 1
fi

echo -e "\n${YELLOW}6Ô∏è‚É£  V√©rification de la documentation${NC}"
if [ -f "$PROJECT_DIR/README.md" ]; then
    echo -e "${GREEN}‚úÖ README.md pr√©sent${NC}"
else
    echo -e "${YELLOW}‚ö†Ô∏è  README.md manquant${NC}"
fi

if [ -f "$PROJECT_DIR/docs/rendu.md" ]; then
    echo -e "${GREEN}‚úÖ docs/rendu.md pr√©sent${NC}"
else
    echo -e "${YELLOW}‚ö†Ô∏è  docs/rendu.md manquant${NC}"
fi

if [ -f "$PROJECT_DIR/docs/prompts_used.md" ]; then
    echo -e "${GREEN}‚úÖ docs/prompts_used.md pr√©sent${NC}"
else
    echo -e "${YELLOW}‚ö†Ô∏è  docs/prompts_used.md manquant${NC}"
fi

echo -e "\n${YELLOW}7Ô∏è‚É£  Test de cr√©ation des r√©pertoires${NC}"
mkdir -p "$OUTPUT_DIR" "$DATA_DIR"
if [ -d "$OUTPUT_DIR" ] && [ -d "$DATA_DIR" ]; then
    echo -e "${GREEN}‚úÖ R√©pertoires de sortie cr√©√©s${NC}"
else
    echo -e "${RED}‚ùå Impossible de cr√©er les r√©pertoires${NC}"
    exit 1
fi

echo -e "\n${YELLOW}8Ô∏è‚É£  V√©rification Docker (optionnel)${NC}"
if command -v docker &> /dev/null; then
    echo -e "${GREEN}‚úÖ Docker install√©${NC}"
    docker --version
    
    if command -v docker-compose &> /dev/null || docker compose version &> /dev/null; then
        echo -e "${GREEN}‚úÖ Docker Compose disponible${NC}"
    else
        echo -e "${YELLOW}‚ö†Ô∏è  Docker Compose non trouv√©${NC}"
    fi
else
    echo -e "${YELLOW}‚ö†Ô∏è  Docker non install√©${NC}"
fi

echo -e "\n=============================================="
echo -e "${GREEN}üéâ Tous les tests smoke sont pass√©s !${NC}"
echo -e "=============================================="
echo ""
echo "Pour ex√©cuter l'analyse compl√®te:"
echo "  1. Via Docker: docker compose -f docker-compose.snippet.yml up --build"
echo "  2. Via Python: cd src && python analyze_corpus.py"
echo ""
